import asyncio
import random
import os
from telethon import events
from telethon.errors import FloodWaitError
from helpers import set_profile_photo, update_message

def format_time(seconds):
    days, seconds = divmod(seconds, 86400)
    hours, seconds = divmod(seconds, 3600)
    minutes, seconds = divmod(seconds, 60)
    parts = []
    if days > 0:
        parts.append(f"{days} –¥–Ω.")
    if hours > 0:
        parts.append(f"{hours} —á.")
    if minutes > 0:
        parts.append(f"{minutes} –º–∏–Ω.")
    if seconds > 0 or not parts:
        parts.append(f"{seconds} —Å–µ–∫.")
    return ' '.join(parts)

async def download_media(event):
    media = await event.get_reply_message()
    if media and media.media:
        path = await event.client.download_media(media, 'ava.jpg')
        return path
    return None

def register_ava_command(client):
    ava_count = 0
    stop_flag = False

    @client.on(events.NewMessage(outgoing=True, pattern=r'Xava\s*(\w+)?'))
    async def ava_command(event):
        nonlocal ava_count, stop_flag

        command = event.pattern_match.group(1)

        if command == 'stop':
            stop_flag = True
            await event.edit('üö´ –ü—Ä–æ—Ü–µ—Å—Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤–∞—Ç–∞—Ä–æ–∫ –∑–∞–º–æ—Ä–æ–∂–µ–Ω.')
            return

        if command == 'resume':
            stop_flag = False
            await event.edit('‚ñ∂Ô∏è –ü—Ä–æ—Ü–µ—Å—Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤–∞—Ç–∞—Ä–æ–∫ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω.')
            return

        if command == 'change':
            stop_flag = True
            await event.edit('üîÑ –°–º–µ–Ω–∞ –∞–≤–∞—Ç–∞—Ä–∫–∏... –û–∂–∏–¥–∞–π—Ç–µ.')
            path = await download_media(event)
            if path:
                await event.edit('üîÑ –ê–≤–∞—Ç–∞—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –∞–≤–∞—Ç–∞—Ä–æ–∫.')
                stop_flag = False
            else:
                await event.edit('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –º–µ–¥–∏–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞.')
                stop_flag = False
            return

        if command is None or command not in ['stop', 'resume', 'change']:
            message = await event.edit('ü©ª –û–∂–∏–¥–∞–π—Ç–µ, —Å–∫–∞—á–∏–≤–∞–µ–º –≤–∞—à—É –∞–≤–∞—Ç–∞—Ä–∫—É... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.')
            await event.edit('üî∂ –ù–∞—á–∏–Ω–∞—é —É—Å—Ç–∞–Ω–æ–≤–∫—É –∞–≤–∞—Ç–∞—Ä–æ–∫...')
            asyncio.create_task(update_message(event, ava_count, 0))

            while True:
                if stop_flag:
                    await asyncio.sleep(1)
                    continue

                for _ in range(5):
                    try:
                        await set_profile_photo(client, 'ava.jpg')
                        ava_count += 1
                        await message.edit(f'‚ù§ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∞–≤–∞—Ç–∞—Ä–æ–∫: {ava_count}')
                        await asyncio.sleep(3)
                    except FloodWaitError as e:
                        wait_time = e.seconds
                        formatted_time = format_time(wait_time)
                        await message.edit(f'üö´ –¢–µ–±—è –µ–±–Ω—É–ª–æ! –ü—Ä–æ–¥–æ–ª–∂–∏–º —á–µ—Ä–µ–∑ {formatted_time}...')
                        await asyncio.sleep(wait_time)

                await asyncio.sleep(random.randint(60, 120))
